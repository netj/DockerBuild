#!/usr/bin/env bash
# test-in-container -- Tests the Docker container that holds a build
# $ test-in-container
#
# To specify which build to use, -t or -T flag can be used as in build-in-container:
# $ test-in-container [-t TAG | -T FULL_TAG] TEST_COMMAND [ARG...]
#
# TEST_COMMAND, which defaults to `make -j test`, can be overridden by the
# DOCKER_TEST_COMMAND variable in DockerBuild.conf.
##
set -euo pipefail
. "$(dirname "$0")"/DockerBuild.bash
. parse-docker-tag-to-use.bash

# NOTE other containers, e.g., postgresql or gpdb, can be run externally, then
# their names can be passed as arguments for --link options followed by the
# normal test command, e.g.:
# $ export DOCKER_RUN_OPTS="--link foo --link bar"
# $ test-in-container  env POSTGRES=foo MONGODB=bar  make test

# default test command
[[ $# -gt 0 ]] || set -- bash -xeuc "$DOCKER_TEST_COMMAND"

tagFromGit=$(docker-tag-from-git)
dockerContainerTest+="$DOCKER_CONTAINER.$tagFromGit.test.$$"
dockerImageBranchRun="$DOCKER_IMAGE:$(docker-image-tag-for-branch "$tagFromGit" "$DOCKER_IMAGE_TAG_RUN")"
dockerImageBranchBuild="$DOCKER_IMAGE:$(docker-image-tag-for-branch "$tagFromGit" "$DOCKER_IMAGE_TAG_BUILD")"
dockerImageBranchStable="$DOCKER_IMAGE:$(docker-image-tag-for-branch "$tagFromGit" "$DOCKER_IMAGE_TAG_STABLE")"
dockerImageBranchTest="$DOCKER_IMAGE:$(docker-image-tag-for-branch "$tagFromGit" "$DOCKER_IMAGE_TAG_TEST")"

if [[ -n $DOCKER_IMAGE_TAG ]]; then
    dockerImageToRunTest="$DOCKER_IMAGE:$DOCKER_IMAGE_TAG"
elif [[ -n $DOCKER_IMAGE_TAG_FOR_BRANCH ]]; then
    dockerImageToRunTest="$DOCKER_IMAGE:$(docker-image-tag-for-branch "$tagFromGit" "$DOCKER_IMAGE_TAG_FOR_BRANCH")"
else
    dockerImageToRunTest=$dockerImageBranchBuild
fi

Here=$(dirname "$0")
on_exit() {
    exitStatus=$?  # keep it to preserve the test's exit status
    case $exitStatus in 0)
        docker-tag "$dockerImageToRunTest" "$dockerImageBranchStable"
    esac
    docker commit "$dockerContainerTest" "$dockerImageBranchTest".$$
    docker rm -f "$dockerContainerTest"
    case $exitStatus in
        0)  verdict=PASS
            next-steps() {
                echo '# Docker image '"$DOCKER_IMAGE:$DOCKER_IMAGE_TAG_TEST"-PASS' now points to the test results'
                echo '# and '"$dockerImageBranchStable"' points to the build the tests were run.'
                echo '# Use `'"$Here"'/inspect-container` to run commands on the test results.'
            }
            ;;
        *)  verdict=FAIL
            next-steps() {
                echo '# Docker image '"$dockerImageBranchTest"'-FAIL now points to this test container.'
                echo '# Use `'"$Here"'/inspect-container` to open a shell for debugging.'
            }
    esac 2>/dev/null
    docker-tag "$dockerImageBranchTest".$$ "$dockerImageBranchRun"
    docker-tag "$dockerImageBranchTest".$$ "$dockerImageBranchTest"
    docker-tag "$dockerImageBranchTest".$$ "$dockerImageBranchTest"-$verdict
    docker-tag "$dockerImageBranchTest".$$ "$DOCKER_IMAGE:$DOCKER_IMAGE_TAG_TEST"-$verdict
    docker-tag "$dockerImageBranchTest".$$ "$DOCKER_IMAGE:$DOCKER_IMAGE_TAG_TEST"
    docker rmi -f "$dockerImageBranchTest".$$
    { set +x; } 2>/dev/null
    echo '###############################################################################'
    next-steps
    echo '###############################################################################'
    exit $exitStatus
}
trap on_exit EXIT
set -x
# run tests
docker-run --name "$dockerContainerTest" -- "$dockerImageToRunTest" "$@"
