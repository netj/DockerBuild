#!/usr/bin/env bash
# inspect-container -- Runs an interactive shell or given command inside a
#                      Docker container attached to a past build or test
#
# $ inspect-container
# Defaults to opening an interactive shell for the latest build or test.
#
# $ inspect-container -t BRANCH_TAG
# $ inspect-container -T FULL_TAG
# To specify an exact build or test image to inspect, a tag (shown from `docker
# images`) can be specified with -T or a tag specific to a branch with -t.
# Here are some example usages specific to the current git branch:
# $ inspect-container -t latest-run
# $ inspect-container -t latest-build
# $ inspect-container -t latest-test-FAIL
# More examples inspecting the latest images across all branches:
# $ inspect-container -T latest
# $ inspect-container -T latest-build
# $ inspect-container -T latest-test
#
# $ inspect-container [-t TAG | -T TAG] COMMAND [ARG...]
# You can run a command instead of an interactive shell by passing it as
# arguments after the TAG: For example, to push a release from the latest
# build that passed all tests:
# $ inspect-container -t latest-test-PASS  make release
##
set -euo pipefail
. "$(dirname "$0")"/DockerBuild.bash
. parse-docker-tag-to-use.bash

tagFromGit=$(docker-tag-from-git)
dockerContainerInspect+="$DOCKER_CONTAINER.$tagFromGit.inspect.$$"

# allow overriding tag, but default to what has last run for current branch
if [[ -n $DOCKER_IMAGE_TAG ]]; then
    dockerImageToInspect="$DOCKER_IMAGE:$DOCKER_IMAGE_TAG"
elif [[ -n $DOCKER_IMAGE_TAG_FOR_BRANCH ]]; then
    dockerImageToInspect="$DOCKER_IMAGE:$(docker-image-tag-for-branch "$tagFromGit" "$DOCKER_IMAGE_TAG_FOR_BRANCH")"
else
    dockerImageToInspect="$DOCKER_IMAGE:$(docker-image-tag-for-branch "$tagFromGit" "$DOCKER_IMAGE_TAG_RUN")"
fi

# run given command
[[ $# -gt 0 ]] || # or a shell depending on whether we're in a tty
    if [[ -t 1 ]]
    then set -- bash -i  # interactive shell in a tty
    else set -- bash     # just a shell
    fi

set -x
docker-run --name "$dockerContainerInspect" \
    --rm \
    -- "$dockerImageToInspect" \
    "$@"
